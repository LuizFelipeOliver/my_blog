<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Luiz Dev</title>
    <link>//localhost:1313/posts/</link>
    <description>Recent content in Posts on Luiz Dev</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Tue, 29 Oct 2024 22:47:19 -0300</lastBuildDate><atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cmaismais_ou_menos</title>
      <link>//localhost:1313/posts/cmaismais_ou_menos/</link>
      <pubDate>Tue, 29 Oct 2024 22:47:19 -0300</pubDate>
      
      <guid>//localhost:1313/posts/cmaismais_ou_menos/</guid>
      <description>&lt;p&gt;Todo mundo começa por algum lugar, é para mim só tem um lugar para começar e é com C++, está não é a minha primeira lingua tão quanto foi esta que aprendi a programar minha primeira se deve unicamente ao Java uma linguagem que gosto muito embora não utilizar ela tanto quanto queria(talvez seja por isso que eu goste dela), antes que eu já perca o foco vamos voltar para C++. Sê você quer velocidade é com ela(bem é o que dizem irei descobrir isso no caminho), mas para mim é sobre ter controle conseguir ter um controle maior que a maioria das linguages(eu sei que tem Assembly) poder trabalhar diretamente com a memoria, o que é um grande perigo mas ainda não cheguei lá ainda&lt;/p&gt;</description>
      <content>&lt;p&gt;Todo mundo começa por algum lugar, é para mim só tem um lugar para começar e é com C++, está não é a minha primeira lingua tão quanto foi esta que aprendi a programar minha primeira se deve unicamente ao Java uma linguagem que gosto muito embora não utilizar ela tanto quanto queria(talvez seja por isso que eu goste dela), antes que eu já perca o foco vamos voltar para C++. Sê você quer velocidade é com ela(bem é o que dizem irei descobrir isso no caminho), mas para mim é sobre ter controle conseguir ter um controle maior que a maioria das linguages(eu sei que tem Assembly) poder trabalhar diretamente com a memoria, o que é um grande perigo mas ainda não cheguei lá ainda&lt;/p&gt;
&lt;p&gt;A primeira coisa que devemo saber é que C++ é uma linguagem de programação fortemente tipada, sendo de multiparadigma, mas o que isso significa&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>O nosso maior medo 🧑‍💻 🐛</title>
      <link>//localhost:1313/posts/o_pesadelo_do_desenvoldedor/</link>
      <pubDate>Tue, 29 Oct 2024 22:47:19 -0300</pubDate>
      
      <guid>//localhost:1313/posts/o_pesadelo_do_desenvoldedor/</guid>
      <description>&lt;p&gt;Sim, todos nós temos medo disso: fazer um deploy e quebrar um site é uma experiência que qualquer profissional da web já sentiu ou ainda vai sentir. Eu mesmo já passei por isso: 😬 o time preocupado, clientes ligando para saber o que aconteceu 📞, e você tentando identificar, o mais rápido possível, o que deu errado. No fim, é sempre aquele pequeno detalhe que foi esquecido (já conferiu a linha 32? 😉).&lt;/p&gt;</description>
      <content>&lt;p&gt;Sim, todos nós temos medo disso: fazer um deploy e quebrar um site é uma experiência que qualquer profissional da web já sentiu ou ainda vai sentir. Eu mesmo já passei por isso: 😬 o time preocupado, clientes ligando para saber o que aconteceu 📞, e você tentando identificar, o mais rápido possível, o que deu errado. No fim, é sempre aquele pequeno detalhe que foi esquecido (já conferiu a linha 32? 😉).&lt;/p&gt;
&lt;p&gt;Certamente existem formas de prevenir esses problemas, e uma delas é o bom e velho teste ✅. Existem várias maneiras de fazer isso, mas hoje quero falar de algo mais assustador 🎃, muito mais perigoso ⚠️, algo que pode custar seu emprego ou pior. Estou falando de: &lt;strong&gt;Software de Sistemas Críticos&lt;/strong&gt; 💻.&lt;/p&gt;
&lt;p&gt;Sistemas críticos são aqueles cujo mau funcionamento pode trazer consequências graves, incluindo danos monetários 💸, riscos à vida humana ❤️, danos a propriedades 🏠 ou ao meio ambiente 🌍. Exemplo disso são sistemas que controlam usinas nucleares ☢️, o sistema de voo de aeronaves ✈️ ou as operações bancárias 💳 (já pensou em trabalhar em um banco?). Já parou para pensar se o código que você escreve estaria preparado para isso? É uma responsabilidade e tanto, não? Imagine programar um marca-passo ❤️‍🩹, onde o seu código literalmente cuida da vida de alguém – ou, pior, descobrir que há um bug 🐛 que, sem atualizações ou hotfix, permanecerá lá para sempre 🔒.&lt;/p&gt;
&lt;p&gt;Isso tudo me faz refletir sobre como nossa profissão envolve deveres de segurança no código que escrevemos 🔐, não só para nós, mas para quem o utiliza. Escrever código seguro e confiável é crucial para nós e para os outros 🧑‍💻.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Bem, saindo um pouco dessa parte assustadora 🕸️, você sabia que existem normas específicas para esses tipos de software? Por exemplo:&lt;/p&gt;
&lt;h3 id=&#34;do-178c-&#34;&gt;DO-178C ✈️&lt;/h3&gt;
&lt;p&gt;Essa norma é voltada para software em sistemas aéreos e define diretrizes de segurança 🛠️, dividindo-se em cinco níveis de criticidade: &lt;em&gt;A&lt;/em&gt;, &lt;em&gt;B&lt;/em&gt;, &lt;em&gt;C&lt;/em&gt;, &lt;em&gt;D&lt;/em&gt; e &lt;em&gt;E&lt;/em&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nível A&lt;/strong&gt;: Representa o maior risco ⚠️ e é considerado crítico para o voo, estando associado a consequências catastróficas em caso de falha. Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Controle de voo 🛫&lt;/li&gt;
&lt;li&gt;Piloto automático 🧑‍✈️&lt;/li&gt;
&lt;li&gt;Controle de motor 🔧&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nível B&lt;/strong&gt;: Ainda é considerado grave, mas não tanto quanto o nível A. Pode resultar numa redução significativa nas margens de segurança ou na funcionalidade ⚙️. Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sistemas de navegação 🧭&lt;/li&gt;
&lt;li&gt;Certos subsistemas aviônicos 📡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nível C&lt;/strong&gt;: Associado a falhas que podem causar um impacto considerável na segurança das aeronaves, mas que não são catastróficas. Esses erros podem causar ferimentos leves ou reduzir a segurança ✋. Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sistemas de comunicação 📞&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nível D&lt;/strong&gt;: As falhas neste nível têm um impacto limitado na segurança de passageiros e tripulação, com recuperação possível 🚸. Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sistemas de entretenimento de passageiros 🎬&lt;/li&gt;
&lt;li&gt;Alguns sistemas de cabine 🚪&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Nível E&lt;/strong&gt;: É o nível mais baixo de criticidade e falhas aqui não têm impacto na segurança da aeronave ✈️, geralmente relacionados a conforto e conveniência. Exemplos:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Entretenimento a bordo 📺&lt;/li&gt;
&lt;li&gt;Iluminação da cabine 💡&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;p&gt;Outro exemplo importante é a:&lt;/p&gt;
&lt;h3 id=&#34;iso-26262-&#34;&gt;ISO 26262 🚗&lt;/h3&gt;
&lt;p&gt;Essa ISO trata da segurança funcional de sistemas elétricos e eletrônicos em veículos 🚘, abrangendo o ciclo de vida do desenvolvimento, da concepção à operação 🔄. Ela define níveis de Integridade de Segurança Automotiva (ASIL - Automotive Safety Integrity Level) que vão de ASIL A (menor rigor) até ASIL D (maior rigor) 🏆. O ASIL é determinado com base em três fatores:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Gravidade&lt;/strong&gt; 🩸&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Exposição&lt;/strong&gt; 🌦️&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Controlabilidade&lt;/strong&gt; 🛑&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Gravidade&lt;/em&gt;&lt;/strong&gt; avalia o potencial de dano pessoal ou material em caso de falha:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;S3: De risco de vida a fatal ⚰️&lt;/li&gt;
&lt;li&gt;S2: Lesões graves a risco de vida 🚑&lt;/li&gt;
&lt;li&gt;S1: Lesões leves a moderadas 🩹&lt;/li&gt;
&lt;li&gt;S0: Sem ferimentos 😊&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Exposição&lt;/em&gt;&lt;/strong&gt; mede a probabilidade de uma falha resultar em um risco de segurança:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;E4: Alta probabilidade 🚨&lt;/li&gt;
&lt;li&gt;E3: Probabilidade moderada 🔄&lt;/li&gt;
&lt;li&gt;E2: Baixa probabilidade ❔&lt;/li&gt;
&lt;li&gt;E1: Muito baixa 👌&lt;/li&gt;
&lt;li&gt;E0: Muito improvável 😌&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Controlabilidade&lt;/em&gt;&lt;/strong&gt; mede a probabilidade de evitar o dano quando ocorre uma situação perigosa:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;C3: Difícil ou impossível de controlar ❌&lt;/li&gt;
&lt;li&gt;C2: Normal, com a maioria das ações do motorista evitando lesões 🚗&lt;/li&gt;
&lt;li&gt;C1: Simplesmente controlável 👌&lt;/li&gt;
&lt;li&gt;C0: Facilmente controlável ✅&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Combinando esses fatores, é possível determinar o nível ASIL do sistema 📊.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Esses são apenas exemplos de algumas normas existentes para sistemas críticos 📝. Poderia escrever horas sobre outras, mas isso é apenas um post de Halloween 🎃 (não que eu não possa me aprofundar mais no futuro!). No final, isso tudo serve para lembrar o quanto a nossa profissão é uma responsabilidade. E aí, ainda pensa em fazer aquele deploy na sexta-feira? 😉&lt;/p&gt;
</content>
    </item>
    
    <item>
      <title>O meu caminho de estudo para ser um Dev</title>
      <link>//localhost:1313/posts/roadmap/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      
      <guid>//localhost:1313/posts/roadmap/</guid>
      <description>&lt;p&gt;Bem se você esta lendo isso(não sei como você chegou até este lugar), fique registrado que este post é nada mais nada menos que uma lista de coisas que irei estudar para a minha trailha de desenvolvedor de sistemas embarcados até chegar a ser o meu maior objetivo ser um dev de robótica 🤖(sim ,isso existe e fiquei tão surpreso quanto você ao descrobrir isso).&lt;/p&gt;
&lt;p&gt;Isto não é uma recomendação do que estudar é um simples bloco de notas 📝 para deixar claro o caminho que estou percorrendo, irei atualizar isso a medida que concluir(bem tentarei) também adicionarei mais items a medida que progrido em meus estudos, afinal escolhi esta área e existe muita coisa por baixo dos panos até chegar nesta tela 💻.&lt;/p&gt;</description>
      <content>&lt;p&gt;Bem se você esta lendo isso(não sei como você chegou até este lugar), fique registrado que este post é nada mais nada menos que uma lista de coisas que irei estudar para a minha trailha de desenvolvedor de sistemas embarcados até chegar a ser o meu maior objetivo ser um dev de robótica 🤖(sim ,isso existe e fiquei tão surpreso quanto você ao descrobrir isso).&lt;/p&gt;
&lt;p&gt;Isto não é uma recomendação do que estudar é um simples bloco de notas 📝 para deixar claro o caminho que estou percorrendo, irei atualizar isso a medida que concluir(bem tentarei) também adicionarei mais items a medida que progrido em meus estudos, afinal escolhi esta área e existe muita coisa por baixo dos panos até chegar nesta tela 💻.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Linguagem de programação: C/C++ (Não tem como fuzir)&lt;/li&gt;
&lt;li&gt;Estrutura de dados e Algoritimos 📊&lt;/li&gt;
&lt;li&gt;Arquitetura de computadores 🏗️&lt;/li&gt;
&lt;li&gt;CAN BUS e UN&lt;/li&gt;
&lt;li&gt;RTOS embarcado&lt;/li&gt;
&lt;li&gt;Padrões automotivos (AutoSAR, UDS, MISRA, ASPICE)&lt;/li&gt;
&lt;li&gt;Sistema Operacionais 🖥️&lt;/li&gt;
&lt;li&gt;Física ⚛️&lt;/li&gt;
&lt;li&gt;Embarcados 🔌&lt;/li&gt;
&lt;li&gt;Ros2 🚀&lt;/li&gt;
&lt;li&gt;Gazebo 🏞️&lt;/li&gt;
&lt;li&gt;Meta-programação 🧩&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Coisas para fazer:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ler livro: Algoritmos - Teoria e Prática(Thomas H. Cormen,  Charles E. Leiserson etc.) 📚&lt;/li&gt;
&lt;li&gt;Ler livro: Arquitetura de Computadores - Uma Abordagem Quantitativa 📖&lt;/li&gt;
&lt;li&gt;Fazer o projeto pingpongOs 🛠️&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Espero que até o fim disto eu não enlouqueça. 😵&lt;/p&gt;
</content>
    </item>
    
  </channel>
</rss>
